generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String         @id @default(cuid())
  email                    String?        @unique
  name                     String?
  fullName                 String?
  roleTitle                String?
  password                 String
  role                     Role           @default(CUSTOMER)
  clientId                 String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  active                   Boolean        @default(true)
  color                    String?
  categories               AgentCategory[]
  projects                 Project[]      @relation("AgentProjects")
  notesAuthored            ProjectNote[]  @relation("NoteAuthor")
  filmProjectsResponsible  ProjectFilm[]  @relation("FilmProjectFilmer")
  filmProjectsCutting      ProjectFilm[]  @relation("FilmProjectCutter")
  client                   Client?        @relation(fields: [clientId], references: [id])
  noticesCreated           Notice[]       @relation("NoticesCreated")
  noticeAssignments        NoticeRecipient[]
  noticeAcknowledgements   NoticeAcknowledgement[]
  feedbacks                Feedback[]     @relation("FeedbackAuthor")
  preferences              UserPreferences?

  @@index([clientId])
}

model UserPreferences {
  id                          String   @id @default(cuid())
  userId                      String   @unique
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Project list preferences
  projectsSort                String?  // e.g., "standard", "customerNo", "clientName"
  projectsSortDir             String?  // "asc" or "desc"

  // Film project list preferences
  filmProjectsSort            String?
  filmProjectsSortDir         String?
  filmProjectsAgentFilter     Json?    // Array of agent IDs
  filmProjectsStatusFilter    Json?    // Array of status values
  filmProjectsPStatusFilter   Json?    // Array of p-status values
  filmProjectsScopeFilter     Json?    // Array of scope values

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model Client {
  id                 String              @id @default(cuid())
  name               String
  salutation         String?             // Anrede: "Herr", "Frau", "Divers"
  firstname          String?             // Vorname der Kontaktperson
  lastname           String?             // Nachname der Kontaktperson
  contact            String?             // Deprecated: wird durch firstname/lastname ersetzt
  email              String?
  phone              String?
  notes              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  customerNo         String?             @unique
  agencyId           String?
  serverId           String?
  workStopped        Boolean             @default(false)
  finished           Boolean             @default(false)
  server             Server?             @relation(fields: [serverId], references: [id])
  agency             Agency?             @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  projects           Project[]
  users              User[]
  joomlaInstallations JoomlaInstallation[]
  emailLogs          EmailLog[]

  @@index([name])
  @@index([agencyId])
  @@index([serverId])
}

model Agency {
  id            String           @id @default(cuid())
  name          String
  contactName   String?
  contactEmail  String?
  contactPhone  String?
  street        String?
  postalCode    String?
  city          String?
  country       String?
  website       String?
  notes         String?
  logoPath      String?
  logoIconPath  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  clients       Client[]
  emailSignatures EmailSignature[]
  mailServers   MailServer[]
}

model Project {
  id        String               @id @default(cuid())
  title     String?              // Optional: für ergänzende Infos wie "Relaunch", "Warteseite", etc.
  type      ProjectType          @default(WEBSITE)
  status    ProjectStatus        @default(WEBTERMIN)
  important String?
  clientId  String
  agentId   String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  agent     User?                @relation("AgentProjects", fields: [agentId], references: [id])
  client    Client               @relation(fields: [clientId], references: [id])
  notes     ProjectNote[]
  website   ProjectWebsite?
  film      ProjectFilm?
  emailQueue EmailQueue[]
  emailLogs  EmailLog[]
  joomlaInstallations JoomlaInstallation[]

  @@index([clientId, status])
  @@index([agentId])
}

model ProjectWebsite {
  projectId       String           @id
  domain          String?
  priority        WebsitePriority  @default(NONE)
  pStatus         ProductionStatus @default(NONE)
  cms             CMS              @default(JOOMLA)
  cmsOther        String?
  webDate         DateTime?
  webterminType   WebterminType?
  demoDate        DateTime?
  onlineDate      DateTime?
  lastMaterialAt  DateTime?
  effortBuildMin  Int?
  effortDemoMin   Int?
  seo             SEOStatus        @default(NEIN)
  textit          TextitStatus     @default(NEIN)
  accessible      Boolean?
  note            String?
  demoLink        String?
  materialStatus  MaterialStatus   @default(ANGEFORDERT)
  isWTAssignment  Boolean          @default(false)
  project         Project          @relation(fields: [projectId], references: [id])
  domainHistory   ProjectDomainHistory[]
}

model ProjectDomainHistory {
  id          String    @id @default(cuid())
  projectId   String
  domain      String
  assignedAt  DateTime  @default(now())
  removedAt   DateTime?
  reason      String?   // e.g., "Projekt beendet", "Domain gewechselt", "Relaunch"
  createdAt   DateTime  @default(now())
  project     ProjectWebsite @relation(fields: [projectId], references: [projectId])

  @@index([projectId])
  @@index([domain])
}

model ProjectFilm {
  projectId        String             @id
  scope            FilmScope?
  priority         FilmPriority       @default(NONE)
  filmerId         String?
  cutterId         String?
  contractStart    DateTime?
  scouting         DateTime?
  scriptToClient   DateTime?
  scriptApproved   DateTime?
  shootDate        DateTime?
  firstCutToClient DateTime?
  finalToClient    DateTime?
  finalLink        String?
  onlineDate       DateTime?
  onlineLink       String?
  lastContact      DateTime?
  status           FilmProjectStatus  @default(AKTIV)
  reminderAt       DateTime?
  note             String?
  project          Project            @relation(fields: [projectId], references: [id])
  filmer           User?              @relation("FilmProjectFilmer", fields: [filmerId], references: [id])
  cutter           User?              @relation("FilmProjectCutter", fields: [cutterId], references: [id])
  previewVersions  FilmPreviewVersion[]

  @@index([status])
  @@index([filmerId])
  @@index([cutterId])
  @@index([reminderAt])
}

model FilmPreviewVersion {
  id          String      @id @default(cuid())
  projectId   String
  version     Int
  sentDate    DateTime
  link        String      @default("")
  createdAt   DateTime    @default(now())
  project     ProjectFilm @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@unique([projectId, version])
  @@index([projectId, sentDate])
}

model ProjectNote {
  id        String   @id @default(cuid())
  projectId String
  authorId  String
  text      String
  createdAt DateTime @default(now())
  author    User     @relation("NoteAuthor", fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, createdAt])
}

model Server {
  id                  String              @id @default(cuid())
  name                String
  hostname            String?
  ip                  String
  froxlorUrl          String?
  mysqlUrl            String?
  froxlorApiKey       String?
  froxlorApiSecret    String?
  sshHost             String?
  sshPort             Int?                @default(22)
  sshUsername         String?
  sshPassword         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  clients             Client[]
  joomlaInstallations JoomlaInstallation[]
}

model MailServer {
  id         String       @id @default(cuid())
  name       String
  host       String
  port       Int          @default(587)
  username   String?
  password   String?
  fromEmail  String
  fromName   String?
  useTls     Boolean      @default(true)
  notes      String?
  agencyId   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  agency     Agency?      @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  emailQueue EmailQueue[]
  emailLogs  EmailLog[]

  @@index([agencyId])
  @@index([name])
}

enum EmailTemplateCategory {
  GENERAL
  WEBSITE
  FILM
  SOCIAL_MEDIA
}

model EmailTemplate {
  id        String                 @id @default(cuid())
  title     String
  subject   String
  body      String
  category  EmailTemplateCategory  @default(GENERAL)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  triggers  EmailTrigger[]

  @@unique([title])
  @@index([createdAt])
  @@index([category])
}

model EmailSignature {
  key       String   @id
  agencyId  String?
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: SetNull)
}

model EmailTrigger {
  id          String            @id @default(cuid())
  name        String
  description String?
  active      Boolean           @default(true)
  triggerType EmailTriggerType
  projectType ProjectType?
  conditions  Json
  delayDays   Int?
  delayType   DelayType?
  templateId  String
  template    EmailTemplate     @relation(fields: [templateId], references: [id])
  recipientConfig Json
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  queuedEmails EmailQueue[]
  sentLogs     EmailLog[]

  @@index([active, triggerType])
  @@index([templateId])
}

model EmailQueue {
  id          String        @id @default(cuid())
  triggerId   String
  trigger     EmailTrigger  @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scheduledFor DateTime
  status       QueueStatus   @default(PENDING)
  toEmail     String
  ccEmails    String?
  subject     String
  body        String
  mailServerId String?
  mailServer   MailServer?   @relation(fields: [mailServerId], references: [id], onDelete: SetNull)
  attempts    Int           @default(0)
  lastAttempt DateTime?
  sentAt      DateTime?
  error       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([status, scheduledFor])
  @@index([projectId])
  @@index([triggerId])
}

model EmailLog {
  id          String        @id @default(cuid())
  triggerId   String?
  trigger     EmailTrigger? @relation(fields: [triggerId], references: [id], onDelete: SetNull)
  projectId   String?
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  clientId    String?
  client      Client?       @relation(fields: [clientId], references: [id], onDelete: SetNull)
  toEmail     String
  ccEmails    String?
  subject     String
  body        String
  sentAt      DateTime      @default(now())
  success     Boolean       @default(true)
  error       String?
  mailServerId String?
  mailServer   MailServer?  @relation(fields: [mailServerId], references: [id], onDelete: SetNull)

  @@index([sentAt])
  @@index([projectId])
  @@index([triggerId])
  @@index([clientId])
}

model Notice {
  id                     String                   @id @default(cuid())
  title                  String
  message                String
  visibility             NoticeVisibility         @default(GLOBAL)
  requireAcknowledgement Boolean                  @default(false)
  isActive               Boolean                  @default(true)
  createdById            String
  createdBy              User                     @relation("NoticesCreated", fields: [createdById], references: [id], onDelete: Cascade)
  recipients             NoticeRecipient[]
  acknowledgements       NoticeAcknowledgement[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  @@index([isActive, visibility])
  @@index([createdById])
}

model NoticeRecipient {
  noticeId   String
  notice     Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([noticeId, userId])
  @@index([userId])
}

model NoticeAcknowledgement {
  id       String  @id @default(cuid())
  noticeId String
  notice   Notice  @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt   DateTime @default(now())

  @@unique([noticeId, userId])
  @@index([userId])
}
enum Role {
  ADMIN
  AGENT
  CUSTOMER
}
enum ProjectType {
  WEBSITE
  FILM
  SOCIAL
}
enum ProjectStatus {
  WEBTERMIN
  MATERIAL
  UMSETZUNG
  DEMO
  ONLINE
}
enum WebsitePriority {
  NONE
  PRIO_1
  PRIO_2
  PRIO_3
}
enum FilmScope {
  FILM
  DROHNE
  NACHDREH
  FILM_UND_DROHNE
  FOTO
  GRAD_360
  K_A
}
enum FilmPriority {
  NONE
  FILM_SOLO
  PRIO_1
  PRIO_2
}
enum FilmProjectStatus {
  AKTIV
  BEENDET
  WARTEN
  VERZICHT
  MMW
}
enum CMS {
  SHOPWARE
  WORDPRESS
  JOOMLA
  LOGO
  PRINT
  CUSTOM
  OTHER
}
enum ProductionStatus {
  NONE
  BEENDET
  MMW
  VOLLST_A_K
}
enum SEOStatus {
  NEIN
  NEIN_NEIN
  JA_NEIN
  JA_JA
}
enum TextitStatus {
  NEIN
  NEIN_NEIN
  JA_NEIN
  JA_JA
}
enum MaterialStatus {
  ANGEFORDERT
  TEILWEISE
  VOLLSTAENDIG
  NV
}

enum WebterminType {
  TELEFONISCH
  BEIM_KUNDEN
  IN_DER_AGENTUR
}

enum AgentCategory {
  WEBSEITE
  FILM
  SOCIALMEDIA
}

enum EmailTriggerType {
  DATE_FIELD_SET
  DATE_REACHED
  CONDITION_MET
  MANUAL
}

enum DelayType {
  BEFORE
  AFTER
  EXACT
}

enum QueueStatus {
  PENDING
  PENDING_CONFIRMATION
  SENDING
  SENT
  FAILED
  CANCELLED
}

enum NoticeVisibility {
  GLOBAL
  TARGETED
}

model Feedback {
  id                 String         @id @default(cuid())
  title              String
  message            String
  type               FeedbackType   @default(SUGGESTION)
  status             FeedbackStatus @default(OPEN)
  authorId           String
  author             User           @relation("FeedbackAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  viewedByAuthor     Boolean        @default(false) // Has the author seen this feedback after it was closed?

  @@index([status, createdAt])
  @@index([authorId])
  @@index([authorId, viewedByAuthor]) // For efficient unread count queries
}

enum FeedbackType {
  BUG
  SUGGESTION
  IMPROVEMENT
  OTHER
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

model JoomlaInstallation {
  id                        String   @id @default(cuid())
  clientId                  String
  client                    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  serverId                  String
  server                    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  projectId                 String?
  project                   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectAssignmentDismissed Boolean  @default(false)
  customerNo                String
  folderName                String
  installPath               String
  installUrl                String
  databaseName              String
  databasePassword          String
  standardDomain            String
  filesExtracted            Int?
  bytesProcessed            BigInt?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([clientId])
  @@index([serverId])
  @@index([projectId])
  @@index([customerNo])
  @@index([createdAt])
  @@index([projectAssignmentDismissed])
}
