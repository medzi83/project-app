generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                  @id @default(cuid())
  email                   String?                 @unique
  name                    String?
  password                String
  role                    Role                    @default(CUSTOMER)
  clientId                String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  active                  Boolean                 @default(true)
  color                   String?
  categories              AgentCategory[]
  fullName                String?
  roleTitle               String?
  feedbacks               Feedback[]              @relation("FeedbackAuthor")
  noticesCreated          Notice[]                @relation("NoticesCreated")
  noticeAcknowledgements  NoticeAcknowledgement[]
  noticeAssignments       NoticeRecipient[]
  projects                Project[]               @relation("AgentProjects")
  filmProjectsCutting     ProjectFilm[]           @relation("FilmProjectCutter")
  filmProjectsResponsible ProjectFilm[]           @relation("FilmProjectFilmer")
  notesAuthored           ProjectNote[]           @relation("NoteAuthor")
  client                  Client?                 @relation(fields: [clientId], references: [id])
  preferences             UserPreferences?

  @@index([clientId])
}

model UserPreferences {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  projectsSort              String?
  projectsSortDir           String?
  filmProjectsSort          String?
  filmProjectsSortDir       String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  filmProjectsAgentFilter   Json?
  filmProjectsPStatusFilter Json?
  filmProjectsScopeFilter   Json?
  filmProjectsStatusFilter  Json?
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id                  String               @id @default(cuid())
  name                String
  phone               String?
  notes               String?
  uploadLinks         Json?                // Array of upload links
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  customerNo          String?              @unique
  serverId            String?
  finished            Boolean              @default(false)
  workStopped         Boolean              @default(false)
  agencyId            String?
  email               String?
  firstname           String?
  lastname            String?
  salutation          String?
  agency              Agency?              @relation(fields: [agencyId], references: [id])
  server              Server?              @relation(fields: [serverId], references: [id])
  emailLogs           EmailLog[]
  joomlaInstallations JoomlaInstallation[]
  projects            Project[]
  users               User[]

  @@index([name])
  @@index([agencyId])
  @@index([serverId])
}

model Agency {
  id              String           @id @default(cuid())
  name            String
  contactName     String?
  contactEmail    String?
  contactPhone    String?
  street          String?
  postalCode      String?
  city            String?
  country         String?
  website         String?
  notes           String?
  logoPath        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  logoIconPath    String?
  clients         Client[]
  emailSignatures EmailSignature[]
  mailServers     MailServer[]
}

model Project {
  id                  String               @id @default(cuid())
  title               String?
  type                ProjectType          @default(WEBSITE)
  status              ProjectStatus        @default(WEBTERMIN)
  important           String?
  clientId            String
  agentId             String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  emailLogs           EmailLog[]
  emailQueue          EmailQueue[]
  joomlaInstallations JoomlaInstallation[]
  agent               User?                @relation("AgentProjects", fields: [agentId], references: [id])
  client              Client               @relation(fields: [clientId], references: [id])
  film                ProjectFilm?
  notes               ProjectNote[]
  website             ProjectWebsite?

  @@index([clientId, status])
  @@index([agentId])
}

model ProjectWebsite {
  projectId      String                 @id
  domain         String?
  priority       WebsitePriority        @default(NONE)
  pStatus        ProductionStatus       @default(NONE)
  cms            CMS                    @default(JOOMLA)
  cmsOther       String?
  webDate        DateTime?
  demoDate       DateTime?
  onlineDate     DateTime?
  lastMaterialAt DateTime?
  effortBuildMin Int?
  effortDemoMin  Int?
  seo            SEOStatus              @default(NEIN)
  textit         TextitStatus           @default(NEIN)
  accessible     Boolean?
  note           String?
  demoLink       String?
  materialStatus MaterialStatus         @default(ANGEFORDERT)
  isWTAssignment Boolean                @default(false)
  webterminType  WebterminType?
  domainHistory  ProjectDomainHistory[]
  project        Project                @relation(fields: [projectId], references: [id])
}

model ProjectDomainHistory {
  id         String         @id @default(cuid())
  projectId  String
  domain     String
  assignedAt DateTime       @default(now())
  removedAt  DateTime?
  reason     String?
  createdAt  DateTime       @default(now())
  project    ProjectWebsite @relation(fields: [projectId], references: [projectId])

  @@index([projectId])
  @@index([domain])
}

model ProjectFilm {
  projectId        String               @id
  scope            FilmScope?
  priority         FilmPriority         @default(NONE)
  filmerId         String?
  cutterId         String?
  contractStart    DateTime?
  scouting         DateTime?
  scriptToClient   DateTime?
  scriptApproved   DateTime?
  shootDate        DateTime?
  firstCutToClient DateTime?
  finalToClient    DateTime?
  onlineDate       DateTime?
  lastContact      DateTime?
  status           FilmProjectStatus    @default(AKTIV)
  reminderAt       DateTime?
  note             String?
  finalLink        String?
  onlineLink       String?
  previewVersions  FilmPreviewVersion[]
  cutter           User?                @relation("FilmProjectCutter", fields: [cutterId], references: [id])
  filmer           User?                @relation("FilmProjectFilmer", fields: [filmerId], references: [id])
  project          Project              @relation(fields: [projectId], references: [id])

  @@index([status])
  @@index([filmerId])
  @@index([cutterId])
  @@index([reminderAt])
}

model FilmPreviewVersion {
  id        String      @id @default(cuid())
  projectId String
  version   Int
  sentDate  DateTime
  createdAt DateTime    @default(now())
  link      String      @default("")
  project   ProjectFilm @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@unique([projectId, version])
  @@index([projectId, sentDate])
}

model ProjectNote {
  id        String   @id @default(cuid())
  projectId String
  authorId  String
  text      String
  createdAt DateTime @default(now())
  author    User     @relation("NoteAuthor", fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, createdAt])
}

model Server {
  id                  String               @id @default(cuid())
  name                String
  ip                  String
  froxlorUrl          String?
  froxlorVersion      String?              @default("2.0+") // "1.x" or "2.0+"
  mysqlUrl            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  froxlorApiKey       String?
  froxlorApiSecret    String?
  hostname            String?
  sshHost             String?
  sshPassword         String?
  sshPort             Int?                 @default(22)
  sshUsername         String?
  clients             Client[]
  joomlaInstallations JoomlaInstallation[]
  databaseServers     DatabaseServer[]
}

model DatabaseServer {
  id                  String               @id @default(cuid())
  serverId            String
  server              Server               @relation(fields: [serverId], references: [id], onDelete: Cascade)
  name                String               // e.g. "MariaDB 10.3" or "MariaDB 10.5"
  version             String               // e.g. "10.3.39" or "10.5"
  host                String               @default("localhost") // e.g. "localhost" or "127.0.0.1"
  port                Int?                 @default(3306) // e.g. 3306 or 3307
  isDefault           Boolean              @default(false) // Mark which one is default for new installations
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  joomlaInstallations JoomlaInstallation[]

  @@index([serverId])
}

model MailServer {
  id         String       @id @default(cuid())
  name       String
  host       String
  port       Int          @default(587)
  username   String?
  password   String?
  fromEmail  String
  fromName   String?
  useTls     Boolean      @default(true)
  notes      String?
  agencyId   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  emailLogs  EmailLog[]
  emailQueue EmailQueue[]
  agency     Agency?      @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
  @@index([name])
}

model EmailTemplate {
  id        String                @id @default(cuid())
  title     String                @unique
  subject   String
  body      String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  category  EmailTemplateCategory @default(GENERAL)
  triggers  EmailTrigger[]

  @@index([createdAt])
  @@index([category])
}

model EmailSignature {
  key       String   @id
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agencyId  String?
  agency    Agency?  @relation(fields: [agencyId], references: [id])
}

model EmailTrigger {
  id              String           @id @default(cuid())
  name            String
  description     String?
  active          Boolean          @default(true)
  triggerType     EmailTriggerType
  projectType     ProjectType?
  conditions      Json
  delayDays       Int?
  delayType       DelayType?
  templateId      String
  recipientConfig Json
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sentLogs        EmailLog[]
  queuedEmails    EmailQueue[]
  template        EmailTemplate    @relation(fields: [templateId], references: [id])

  @@index([active, triggerType])
  @@index([templateId])
}

model EmailQueue {
  id           String       @id @default(cuid())
  triggerId    String
  projectId    String
  scheduledFor DateTime
  status       QueueStatus  @default(PENDING)
  toEmail      String
  ccEmails     String?
  subject      String
  body         String
  mailServerId String?
  attempts     Int          @default(0)
  lastAttempt  DateTime?
  sentAt       DateTime?
  error        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  mailServer   MailServer?  @relation(fields: [mailServerId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  trigger      EmailTrigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@index([status, scheduledFor])
  @@index([projectId])
  @@index([triggerId])
}

model EmailLog {
  id           String        @id @default(cuid())
  triggerId    String?
  projectId    String?
  toEmail      String
  ccEmails     String?
  subject      String
  body         String
  sentAt       DateTime      @default(now())
  success      Boolean       @default(true)
  error        String?
  mailServerId String?
  clientId     String?
  client       Client?       @relation(fields: [clientId], references: [id])
  mailServer   MailServer?   @relation(fields: [mailServerId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])
  trigger      EmailTrigger? @relation(fields: [triggerId], references: [id])

  @@index([sentAt])
  @@index([projectId])
  @@index([triggerId])
  @@index([clientId])
}

model Notice {
  id                     String                  @id @default(cuid())
  title                  String
  message                String
  visibility             NoticeVisibility        @default(GLOBAL)
  requireAcknowledgement Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  createdById            String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdBy              User                    @relation("NoticesCreated", fields: [createdById], references: [id], onDelete: Cascade)
  acknowledgements       NoticeAcknowledgement[]
  recipients             NoticeRecipient[]

  @@index([isActive, visibility])
  @@index([createdById])
}

model NoticeRecipient {
  noticeId   String
  userId     String
  assignedAt DateTime @default(now())
  notice     Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([noticeId, userId])
  @@index([userId])
}

model NoticeAcknowledgement {
  id       String   @id @default(cuid())
  noticeId String
  userId   String
  readAt   DateTime @default(now())
  notice   Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noticeId, userId])
  @@index([userId])
}

model Feedback {
  id             String         @id @default(cuid())
  title          String
  message        String
  type           FeedbackType   @default(SUGGESTION)
  status         FeedbackStatus @default(OPEN)
  authorId       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  viewedByAuthor Boolean        @default(false)
  adminResponse  String?
  author         User           @relation("FeedbackAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([authorId])
  @@index([authorId, viewedByAuthor])
}

model JoomlaInstallation {
  id                         String          @id @default(cuid())
  clientId                   String
  serverId                   String
  databaseServerId           String?         // Optional: Which database server was used
  customerNo                 String
  folderName                 String
  installPath                String
  installUrl                 String
  databaseName               String
  databasePassword           String
  databaseHost               String?         // Store the actual host used (e.g. "localhost" or "127.0.0.1")
  databasePort               Int?            // Store the actual port used (e.g. 3306 or 3307)
  standardDomain             String
  filesExtracted             Int?
  bytesProcessed             BigInt?
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  projectId                  String?
  projectAssignmentDismissed Boolean         @default(false)
  client                     Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project                    Project?        @relation(fields: [projectId], references: [id])
  server                     Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  databaseServer             DatabaseServer? @relation(fields: [databaseServerId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([serverId])
  @@index([projectId])
  @@index([customerNo])
  @@index([createdAt])
  @@index([projectAssignmentDismissed])
  @@index([databaseServerId])
}

enum EmailTemplateCategory {
  GENERAL
  WEBSITE
  FILM
  SOCIAL_MEDIA
}

enum Role {
  ADMIN
  AGENT
  CUSTOMER
}

enum ProjectType {
  WEBSITE
  FILM
  SOCIAL
}

enum ProjectStatus {
  WEBTERMIN
  MATERIAL
  UMSETZUNG
  DEMO
  ONLINE
}

enum WebsitePriority {
  NONE
  PRIO_1
  PRIO_2
  PRIO_3
}

enum FilmScope {
  FILM
  DROHNE
  NACHDREH
  FILM_UND_DROHNE
  FOTO
  GRAD_360
  K_A
}

enum FilmPriority {
  NONE
  FILM_SOLO
  PRIO_1
  PRIO_2
}

enum FilmProjectStatus {
  AKTIV
  BEENDET
  WARTEN
  VERZICHT
  MMW
}

enum CMS {
  SHOPWARE
  WORDPRESS
  JOOMLA
  LOGO
  PRINT
  CUSTOM
  OTHER
}

enum ProductionStatus {
  NONE
  BEENDET
  MMW
  VOLLST_A_K
}

enum SEOStatus {
  NEIN
  NEIN_NEIN
  JA_NEIN
  JA_JA
}

enum TextitStatus {
  NEIN
  NEIN_NEIN
  JA_NEIN
  JA_JA
}

enum MaterialStatus {
  ANGEFORDERT
  TEILWEISE
  VOLLSTAENDIG
  NV
}

enum WebterminType {
  TELEFONISCH
  BEIM_KUNDEN
  IN_DER_AGENTUR
}

enum AgentCategory {
  WEBSEITE
  FILM
  SOCIALMEDIA
}

enum EmailTriggerType {
  DATE_FIELD_SET
  DATE_REACHED
  CONDITION_MET
  MANUAL
}

enum DelayType {
  BEFORE
  AFTER
  EXACT
}

enum QueueStatus {
  PENDING
  SENDING
  SENT
  FAILED
  CANCELLED
  PENDING_CONFIRMATION
}

enum NoticeVisibility {
  GLOBAL
  TARGETED
}

enum FeedbackType {
  BUG
  SUGGESTION
  IMPROVEMENT
  OTHER
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}
