generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String         @id @default(cuid())
  email                    String?        @unique
  name                     String?
  password                 String
  role                     Role           @default(CUSTOMER)
  clientId                 String?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  active                   Boolean        @default(true)
  color                    String?
  categories               AgentCategory[]
  projects                 Project[]      @relation("AgentProjects")
  notesAuthored            ProjectNote[]  @relation("NoteAuthor")
  filmProjectsResponsible  ProjectFilm[]  @relation("FilmProjectFilmer")
  filmProjectsCutting      ProjectFilm[]  @relation("FilmProjectCutter")
  client                   Client?        @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model Client {
  id         String    @id @default(cuid())
  name       String
  contact    String?
  phone      String?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  customerNo String?   @unique
  serverId   String?
  server     Server?   @relation(fields: [serverId], references: [id])
  projects   Project[]
  users      User[]

  @@index([name])
  @@index([serverId])
}

model Project {
  id        String          @id @default(cuid())
  title     String
  type      ProjectType     @default(WEBSITE)
  status    ProjectStatus   @default(WEBTERMIN)
  important String?
  clientId  String
  agentId   String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  agent     User?           @relation("AgentProjects", fields: [agentId], references: [id])
  client    Client          @relation(fields: [clientId], references: [id])
  notes     ProjectNote[]
  website   ProjectWebsite?
  film      ProjectFilm?

  @@index([clientId, status])
  @@index([agentId])
}

model ProjectWebsite {
  projectId      String           @id
  domain         String?
  priority       WebsitePriority  @default(NONE)
  pStatus        ProductionStatus @default(NONE)
  cms            CMS              @default(JOOMLA)
  cmsOther       String?
  webDate        DateTime?
  demoDate       DateTime?
  onlineDate     DateTime?
  lastMaterialAt DateTime?
  effortBuildMin Int?
  effortDemoMin  Int?
  seo            SEOStatus        @default(NEIN)
  textit         TextitStatus     @default(NEIN)
  accessible     Boolean?
  note           String?
  demoLink       String?
  materialStatus MaterialStatus   @default(ANGEFORDERT)
  project        Project          @relation(fields: [projectId], references: [id])
}

model ProjectFilm {
  projectId        String             @id
  scope            FilmScope?
  priority         FilmPriority       @default(NONE)
  filmerId         String?
  cutterId         String?
  contractStart    DateTime?
  scouting         DateTime?
  scriptToClient   DateTime?
  scriptApproved   DateTime?
  shootDate        DateTime?
  firstCutToClient DateTime?
  finalToClient    DateTime?
  onlineDate       DateTime?
  lastContact      DateTime?
  status           FilmProjectStatus  @default(AKTIV)
  reminderAt       DateTime?
  note             String?
  project          Project           @relation(fields: [projectId], references: [id])
  filmer           User?             @relation("FilmProjectFilmer", fields: [filmerId], references: [id])
  cutter           User?             @relation("FilmProjectCutter", fields: [cutterId], references: [id])

  @@index([status])
  @@index([filmerId])
  @@index([cutterId])
  @@index([reminderAt])
}

model ProjectNote {
  id        String   @id @default(cuid())
  projectId String
  authorId  String
  text      String
  createdAt DateTime @default(now())
  author    User     @relation("NoteAuthor", fields: [authorId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId, createdAt])
}

model Server {
  id              String   @id @default(cuid())
  name            String
  hostname        String?
  ip              String
  froxlorUrl      String?
  mysqlUrl        String?
  froxlorApiKey   String?
  froxlorApiSecret String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  clients         Client[]
}
enum Role {
  ADMIN
  AGENT
  CUSTOMER
}
enum ProjectType {
  WEBSITE
  FILM
  SOCIAL
}
enum ProjectStatus {
  WEBTERMIN
  MATERIAL
  UMSETZUNG
  DEMO
  ONLINE
}
enum WebsitePriority {
  NONE
  PRIO_1
  PRIO_2
  PRIO_3
}
enum FilmScope {
  FILM
  DROHNE
  NACHDREH
  FILM_UND_DROHNE
}
enum FilmPriority {
  NONE
  FILM_SOLO
  PRIO_1
  PRIO_2
}
enum FilmProjectStatus {
  AKTIV
  BEENDET
  WARTEN
  VERZICHT
  MMW
}
enum CMS {
  SHOPWARE
  WORDPRESS
  JOOMLA
  LOGO
  PRINT
  CUSTOM
  OTHER
}
enum ProductionStatus {
  NONE
  BEENDET
  MMW
  VOLLST_A_K
}
enum SEOStatus {
  NEIN
  NEIN_NEIN
  JA_NEIN
  JA_JA
}
enum TextitStatus {
  NEIN
  NEIN_NEIN
  JA_NEIN
  JA_JA
}
enum MaterialStatus {
  ANGEFORDERT
  TEILWEISE
  VOLLSTAENDIG
  NV
}

enum AgentCategory {
  WEBSEITE
  FILM
  SOCIALMEDIA
}
